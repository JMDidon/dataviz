// Generated by CoffeeScript 1.6.1
(function() {

  $(function() {
    var blazonTPL, blazons, charTPL, characters, filter, getOutput, moves, output, setCheckboxes, setFilter, sidebar, sortItems, timeout, toggleAll, toggler, updateSidebar;
    $.ajaxSetup({
      async: false
    });
    characters = blazons = moves = output = [];
    sidebar = $('#sidebar-wrapper');
    filter = $('#sidebar-filter');
    toggler = $('#sidebar-toggler');
    Array.prototype.find = function(k, v) {
      return this.filter(function(e, i) {
        return e[k] === v;
      });
    };
    timeout = function(t, c) {
      return setTimeout(c, t);
    };
    blazonTPL = function(v) {
      return '<li class="sidebar-item-blazon"><strong><label><input type="checkbox" id="blazon_' + v.i + '" class="sidebar-check-blazon">' + v.name + '</label></strong><ul></ul></li>';
    };
    charTPL = function(v) {
      return '<li class="sidebar-item-char"><label><input type="checkbox" id="char_' + v.i + '_' + v.j + '" class="sidebar-check-char" data-name="' + v.name + '">' + v.name + '</label></li>';
    };
    sortItems = function() {
      var b, c, _i, _j, _len, _len1;
      blazons.sort((function(a, b) {
        return a['name'] > b['name'];
      }));
      for (_i = 0, _len = blazons.length; _i < _len; _i++) {
        b = blazons[_i];
        b['characters'] = [];
        for (_j = 0, _len1 = characters.length; _j < _len1; _j++) {
          c = characters[_j];
          if (c['blazon'] === b['name']) {
            b['characters'].push(c);
          }
        }
        b['characters'].sort((function(a, b) {
          return a['name'] > b['name'];
        }));
      }
      return blazons = blazons.filter((function(e, i) {
        return e['characters'].length;
      }));
    };
    updateSidebar = function() {
      var b, blazon_item, c, i, j, _i, _j, _len, _len1, _ref, _results;
      _results = [];
      for (i = _i = 0, _len = blazons.length; _i < _len; i = ++_i) {
        b = blazons[i];
        blazon_item = $(blazonTPL({
          i: i,
          name: b['name']
        }));
        _ref = b['characters'];
        for (j = _j = 0, _len1 = _ref.length; _j < _len1; j = ++_j) {
          c = _ref[j];
          $(charTPL({
            i: i,
            j: j,
            name: c['name']
          })).appendTo(blazon_item.children('ul'));
        }
        _results.push(blazon_item.appendTo(sidebar));
      }
      return _results;
    };
    getOutput = function() {
      var i, j, k, move, v;
      for (v in output) {
        k = output[v];
        if (typeof k !== 'object') {
          continue;
        }
        move = moves.find('name', k['name']);
        if (!move.length) {
          continue;
        }
        delete move[0]['name'];
        delete move[0]['find'];
        k['moves'] = (function() {
          var _ref, _results;
          _ref = move[0];
          _results = [];
          for (i in _ref) {
            j = _ref[i];
            _results.push(j);
          }
          return _results;
        })();
      }
      return output;
    };
    setCheckboxes = function() {
      var token;
      $('.sidebar-check-blazon').on('change', function() {
        var v;
        v = $(this).is(':checked');
        return $(this).parents('.sidebar-item-blazon').find('input').not(this).each(function() {
          this.checked = v;
          return $(this).change();
        });
      });
      token = false;
      return $('.sidebar-check-char').on('change', function() {
        var m;
        if ($(this).is(':not(:checked)')) {
          $(this).parents('.sidebar-item-blazon').find('.sidebar-check-blazon').attr('checked', false);
        }
        m = $(this).attr('id').match(/char_([0-9]+)_([0-9]+)/);
        if ($(this).is(':checked')) {
          output[$(this).attr('id')] = blazons[parseInt(m[1])]['characters'][parseInt(m[2])];
        } else {
          delete output[$(this).attr('id')];
        }
        clearTimeout(token);
        return token = timeout(50, function() {
          return console.log(getOutput());
        });
      });
    };
    setFilter = function() {
      return filter.on('keyup', function() {
        var v;
        v = this.value.toLowerCase();
        return $('.sidebar-check-char').each(function() {
          var parent;
          parent = $(this).parents('.sidebar-item-char').hide();
          if (this.dataset.name.toLowerCase().indexOf(v) > -1) {
            return $(this).parents('.sidebar-item-char').show();
          }
        });
      });
    };
    toggleAll = function() {
      var v;
      v = $('.sidebar-check-blazon:checked').length !== $('.sidebar-check-blazon').length;
      return $('.sidebar-check-blazon').each(function() {
        this.checked = v;
        return $(this).change();
      });
    };
    toggler.on('click', toggleAll);
    $.get('api/get/characters', function(d) {
      return characters = JSON.parse(d);
    });
    $.get('api/get/blazons', function(d) {
      return blazons = JSON.parse(d);
    });
    $.get('api/get/moves', function(d) {
      return moves = JSON.parse(d);
    });
    sortItems();
    updateSidebar();
    setCheckboxes();
    setFilter();
    return toggleAll();
  });

}).call(this);
